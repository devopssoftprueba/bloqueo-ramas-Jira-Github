<?php
// El webhook es un receptor escucha los mensajes que Jira env√≠a cuando cambia el estado de una historia (issue). Seg√∫n ese estado, decide si debe bloquear o desbloquear una rama en GitHub.

require_once __DIR__ . '/../../src/PeticionJira.php'; // Importa la clase que procesa los datos del payload de Jira
require_once __DIR__ . '/../../src/BloqueadorDeRamas.php'; // tiene metodos para bloquear o desbloquear ramas usando la API de GitHub.
$config = require __DIR__ . '/../../config/config.php'; // tiene lo configurable token, estados que activan el bloqueo, rutas de log, repos, etc.

$rawInput = file_get_contents('php://input'); // Captura el cuerpo (payload) crudo de la petici√≥n HTTP (JSON de Jira)

if (empty($rawInput)) { // Si no hay contenido en el payload...
    http_response_code(400); // Retorna error 400 - Bad Request
    echo "No se recibi√≥ ning√∫n payload."; // Muestra mensaje de error
    exit; // Termina la ejecuci√≥n del script
}

file_put_contents(
    $config['log_path'],
    date('Y-m-d H:i:s') . " üì© Payload recibido:\n". $rawInput . "\n\n",
    FILE_APPEND
); // Guarda en el log el payload recibido con marca de tiempo

$json = json_decode($rawInput, true); // Convierte el JSON en array asociativo de PHP validar para que lo hace

if ($json === null) { // Si la decodificaci√≥n falla (payload no es JSON v√°lido)...
    http_response_code(400); // Devuelve error 400
    echo "El payload no es un JSON v√°lido."; // Muestra mensaje de error
    file_put_contents(
        $config['log_path'],
        date('Y-m-d H:i:s') . " ‚ùå Error: Payload no es JSON v√°lido.\n\n",
        FILE_APPEND
    ); // Registra el error en el log
    exit; // Termina ejecuci√≥n
}

$datos = PeticionJira::extraerDatosDesdePayload($json); // De la clase peticion jira que se encuentra en el archivo peticionjira.php. va a extraer datos necesarios del payload (estado, issue, rama) utilizando el metodo extraerDatosDesdePayload

if (!$datos) { // Si no se pudieron extraer los datos...
    file_put_contents(
        $config['log_path'],
        date('Y-m-d H:i:s') . " ‚ö†Ô∏è No se pudo extraer datos del payload.\n\n",
        FILE_APPEND
    ); // Guarda un mensaje de advertencia en el log
    exit; // Termina ejecuci√≥n
}

file_put_contents(
    $config['log_path'],
    date('Y-m-d H:i:s') . " üì© Cambio recibido: Issue '{$datos['issue']}' cambi√≥ a estado '{$datos['estado']}'\n",
    FILE_APPEND
); // Registra en el log el issue y el nuevo estado recibido

$debeBloquear = in_array(
    strtoupper($datos['estado']),
    array_map('strtoupper', $config['estados_bloqueo'])
        // Asigna a la vaariable un valor booleano seg√∫n el estado que obtiene de la peticion de Jira.
);//si el estado de Jira est√° en el listado para bloquear, retorna "true" de lo contrario retornar√° "false"

$accion = $debeBloquear ? 'bloquear' : 'desbloquear'; // Define la l√≥gica de la condicion, si la variable $debeBloquear retorna un true, a la variable $accion se le asigna "Bloquear"
                                                      // De lo contrario, la variable $accion se le asignar√° "desbloquear"

foreach ($config['repositorios'] as $repo) { // Recorre cada uno de los repositorios configurados en el archivo config.php
    $bloqueador = new BloqueadorDeRamas($config['github_token'], $repo); // Crea una instancia del bloqueador con el token de GitHub y el nombre del repo
    $resultado = $bloqueador->$accion($datos['rama']); // Llama din√°micamente al metodo bloquear() o desbloquear() seg√∫n corresponda

    if ($resultado['codigo'] === 200 || $resultado['codigo'] === 204) { // Si la respuesta de la API de GitHub fue exitosa...
        file_put_contents(
            $config['log_path'],
            date('Y-m-d H:i:s') . " ‚úÖ Rama '{$datos['rama']}' en repositorio '{$repo}' fue " . ($accion === 'bloquear' ? 'bloqueada' : 'desbloqueada') . " exitosamente.\n",
            FILE_APPEND
        ); // Registra en el log el √©xito de la operaci√≥n
    } else { // Si ocurri√≥ un error con la operaci√≥n...
        file_put_contents(
            $config['log_path'],
            date('Y-m-d H:i:s') . " ‚ùå Error al {$accion} rama '{$datos['rama']}' en repositorio '{$repo}': {$resultado['error']}\n",
            FILE_APPEND
        ); // Registra el error principal en el log
        file_put_contents(
            $config['log_path'],
            date('Y-m-d H:i:s') . " üîç Respuesta cruda: {$resultado['respuesta']}\n",
            FILE_APPEND
        ); // Registra la respuesta completa (√∫til para depurar)
    }
}
